name: PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  pr-quality:
    name: Pull Request Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm run type-check

      - name: Lint check
        run: pnpm run lint:check

      - name: Format check
        run: pnpm run format:check

      - name: Run unit tests with coverage
        run: pnpm run test:cov

      - name: Build check
        run: pnpm run build

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## PR Quality Check Results')
            );

            const body = `## PR Quality Check Results

            ✅ **Quality checks completed for commit:** \`${context.sha.substring(0, 7)}\`

            - Type checking: ${process.env.TYPE_CHECK_STATUS || '✅ Passed'}
            - Linting: ${process.env.LINT_STATUS || '✅ Passed'}  
            - Formatting: ${process.env.FORMAT_STATUS || '✅ Passed'}
            - Unit tests: ${process.env.TEST_STATUS || '✅ Passed'}
            - Build: ${process.env.BUILD_STATUS || '✅ Passed'}

            ---
            *This comment is automatically updated on each push.*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
